set undodir=~/.cache/vim/undo
set directory=~/.cache/vim/swap
set backupdir=~/.cache/vim/backup
set viewdir=~/.cache/vim/view
set runtimepath=~/.config/vim,$VIMRUNTIME,/usr/share/vim/vimfiles/,~/.config/vim/after

" {{{1 Plugin
call plug#begin('~/.config/vim/bundle')
" 1. Plugins
"   Vim-plug - Plugin manager
    Plug 'junegunn/vim-plug'

    Plug './archlinux-snippets'
    Plug './rss-reader.vim'

"   Vim-Go - for go stuff
    Plug 'fatih/vim-go', {'for': 'go'}
    Plug 'rust-lang/rust.vim', {'for': 'rust'}
    Plug 'racer-rust/vim-racer', {'for': 'rust'}
    let g:racer_cmd = "/usr/bin/racer"
    let g:racer_experimental_completer = 1

"   Vim-Wiki - For notes and stuff
    Plug 'vimwiki/vimwiki', {'on' : ['VimwikiIndex', 'VimwikiUISelect'], 'for': 'wiki' }
    Plug 'itchyny/calendar.vim', {'on' : 'Calendar', 'for': 'wiki' }
    " Plug 'tbabej/taskwiki', {'on': 'VimwikiIndex', 'for': 'wiki'}

" Comletion and linting
    let g:ale_completion_enabled = 1
    let g:ale_set_balloons = 1
    inoremap <silent> <C-@> <C-\><C-O>:ALEComplete<CR>
    Plug 'dense-analysis/ale', {'frozen': 1}
    let g:ale_set_balloons = 1
    let g:ale_hover_to_popup=0
    " Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}

"   GIT STUFF
"   Because its great
    Plug 'tpope/vim-fugitive'

" Misc
    Plug 'tpope/vim-unimpaired'
    Plug 'tpope/vim-obsession'
    Plug  'tpope/vim-sleuth'

"   Commenting
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-surround'


"   Latex sanity
    Plug 'lervag/vimtex', {'for': 'tex'}
    let g:latex_view_general_viewer = 'zathura'
    let g:vimtex_view_method = "zathura"
    Plug '907th/vim-auto-save', { 'for': 'tex' }

"   Trying out snippets
    Plug 'sirver/ultisnips'
    Plug 'honza/vim-snippets'

    Plug 'junegunn/fzf.vim'

" Style
    Plug 'vim-airline/vim-airline'
    Plug 'whatyouhide/vim-gotham'
    Plug 'airblade/vim-gitgutter'

" goyo for editing
    Plug 'junegunn/goyo.vim'

call plug#end()
" }}}1
" {{{1 Description

" 2. Hotkeys
"   2.1 Leader Hotkeys (SPACE)
"       s: search ctags
"       f: find
"       g: grep
"       t: tab things
"       d: Git diff 
"       [: Ale go to definition
"       r: Ale find references
"       h: Ale hover
"       e: toggle quickfix
"       l: toggle location list
"       j: prev buffer 
"       k: next buffer 
"       <Tab>: Cycle tabs
"       /: Open last text match innside a quickfix window 
"   2.2 Maps
"      2.1 - Normal
"           ^A: start of line
"           ^E: end of line
"           ^Q: Paranthesis match
"           ESC: Disable hlsearch
"           ^J: rebound }
"           ^K: rebound {
"           ^P: Location/Quickfix previous
"           ^N: Location/Quickfix next 
"      2.3 - Visual
"           *: Visual hlsearch 
"      2.4 - Command Line 
"           ^J: Down in history
"           ^K: Up in history
"           ^A: start of line
"           ^E: end of line
"      2.5 - Terminal
"       
"   2.3 Nice To Know 
"       2.4 ins-complete 
"           ^X^N: Just this file
"           ^X^F: For filenames
"           ^X^]: From ctags only 
"           ^X^O: Omnicomplete
"           ^N: Anything from complete
"       2.4 VimWiki
" }}}1
" {{{1 Base config

" =========
" Theme
" =========
set termguicolors
set t_Co=256
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
set t_ut=
syntax enable
filetype plugin indent on
colorscheme gotham

" Sane defaults
set ff=unix
set nocompatible
set shell=/bin/zsh
set enc=utf-8
set fenc=utf-8
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" =========
" Visual 
" =========
set number
set relativenumber  " start with relative numbers
set ruler
set cursorline
set noshowmode
set laststatus=2    " always show statusbar  
set ttimeoutlen=50
set shortmess=IatO    "We dont care for the intro message
set list
set listchars=tab:>-


" =========
" Behaviour
" =========
set autoread            " If we find changes
set nobackup            " lol
set backupskip=/tmp
set noswapfile          " Yolo
set magic               " Muh regex
set mouse=""              " We don't want the mouse
set clipboard=unnamed   " We want to access clipboard from X
set scrolloff=10 	    " 10 lines space between frame and cursor
set splitright          " Splitting right feels more natrual
" set splitbelow
set ttyfast
set diffopt=internal,algorithm:patience,indent-heuristic
"set hidden              " So we can create new buffers and dont need to save them
set noesckeys           " Remap esc!

set wrap
set wrapmargin=80
set textwidth=120
"History and undo
set history=1000
set undofile

set undolevels=1000
set undoreload=10000
" Completion menu
set completeopt=menu,menuone,popup,noselect,noinsert
set omnifunc=ale#completion#OmniFunc

"Wildmenu
set path=.                  " Include relative directory to the file
set path+=,,                " Include current directory
set path+=**                " Include recurisve directories
set wildmenu            	" visual autocomplete for command menu
set wildignorecase      " Make wildmenu ignore our case
set wildmode=longest,full	" Show vim completion menu

" File ignores for wildmenu
set wildignore+=.git
set wildignore+=*.pyc
set wildignore+=node_modules
set wildignore+=.tags

" =========
" Searching
" =========
set ignorecase
set smartcase
set incsearch

" ===========
" Indentation
" ===========
set expandtab " We want spaces!
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent 	" Indent automatically
set smartindent " Clever indentation

" =======
" Folding 
" =======
if &foldmethod ==# ''
  set foldmethod=syntax
endif
set foldlevel=0
set foldcolumn=0
set foldtext=TxtFoldText()

function! TxtFoldText()
  let level = repeat('-', min([v:foldlevel-1,3])) . '+'
  let title = substitute(getline(v:foldstart), '{\{3}\d\?\s*', '', '')
  let title = substitute(title, '^["#! ]\+', '', '')
  return printf('%-4s %-s', level, title)
endfunction

" }}}}2
" {{{1 Mapping
"{{{2 Remappings
"
"FUCK YOU HASH KEY
inoremap # X<BS>#

" Dont move on *
nnoremap * *<c-o>

map Ã¸ :
map ; :

" More natural movement when lines wrap
noremap j gj
noremap k gk
nnoremap gj 5j
nnoremap gk 5k

" Emacs stuff i really like
noremap <C-A> ^
noremap <C-E> $
noremap <C-Q> %

"Faster up and down
noremap <silent> <C-J> :<C-u>execute "keepjumps norm! " . v:count1 . "}"<CR>
noremap <silent> <C-K> :<C-u>execute "keepjumps norm! " . v:count1 . "{"<CR>
vnoremap <silent> <C-J> :<C-u>execute "keepjumps norm! " . v:count1 . "}"<CR>
vnoremap <silent> <C-K> :<C-u>execute "keepjumps norm! " . v:count1 . "{"<CR>


" Folds
nnoremap          zf zMzvzz
nnoremap          zz za
nnoremap <silent> zj :silent! normal! zc<cr>zjzvzz
nnoremap <silent> zk :silent! normal! zc<cr>zkzvzz[z"
" Command line
cnoremap <C-K> <Up>
cnoremap <C-J> <Down>
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
"}}}
"{{{2 Leader mapping
let mapleader=" "
let maplocalleader=","

" map <silent><leader>s :source ~/.vimrc<CR>
map <leader>g :Rg 
map <leader>[ :ALEGoToDefinition<CR>
map <leader>r :ALEFindReferences<CR>
map <leader>h :ALEDocumentation<CR>
map <silent><leader>s :ALEHover<CR>

vnoremap <leader>p :diffput<CR>

map <leader>d :Gdiffsplit!<cr>
map <leader>m :make<cr>

" Buffers
nnoremap <leader>j  :bprev<CR>
nnoremap <leader>k  :bnext<CR>

" Fugitive
nnoremap gs :Gtabedit :<CR>
nnoremap gm :Gmerge<CR>
nnoremap gr :Grebase<CR>

"}}}
"{{{2 New mappings
" ========
" New Maps
" ========
map <silent><ESC> :set hlsearch!<CR>
map <ScrollWheelUp> <nop>
map <S-ScrollWheelUp> <nop>
map <ScrollWheelDown> <nop>
map <S-ScrollWheelDown> <nop>

noremap <silent><C-S> :silent update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>
nnoremap <leader><TAB> :tabnext<CR>

" This monster lets us use star with a visual selection
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Ref: toggle.vim
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
nnoremap <silent><C-n> :execute windowNext<cr>zvzz
nnoremap <silent><C-p> :execute windowPrev<cr>zvzz
"}}}
"{{{2 Commands
cmap W!! w !sudo tee % >/dev/null
command! Source :source ~/.config/vim/vimrc
"}}}
" }}}2
"{{{1 Autocommand
"{{{2 Default aucommands
augroup filetypes
    autocmd!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown | setlocal tw=80
    au Filetype mail setlocal tw=80 
    au Filetype latex setlocal tw=80 
    au Filetype sh setlocal noexpandtab
    au Filetype gitcommit setlocal spell | setlocal tw=72
    au Filetype git setlocal foldlevel=20
augroup END

augroup vimrc_autocommands
  autocmd!
  autocmd WinEnter,FocusGained  * setlocal cursorline
  autocmd WinLeave,FocusLost    * setlocal nocursorline
  autocmd InsertEnter           * setlocal norelativenumber
  autocmd InsertLeave           * setlocal relativenumber

  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line('$') |
        \   execute 'normal! g`"' |
        \ endif
augroup END
"}}}
"{{{2 vimwiki
augroup vimwiki_template
    autocmd!
    function! InitTemplate()
        let f = system("date \"+%Y-%m-%d\" | tr -d '\n' | xargs -d '\n' -0 printf '= %s ='")
        let l = append(0, f)
        normal G
    endfunction
    autocmd BufEnter    *   setlocal nowrap
    autocmd BufNewFile */diary/*.wiki call InitTemplate()
augroup END
"}}}
"{{{2 Goyo
" Because numbers can fuck off
function! s:goyo_enter()
    augroup goyo_enter
        autocmd BufEnter    *   setlocal tw=80
        autocmd InsertEnter *   setlocal nonumber
        autocmd InsertLeave *   setlocal norelativenumber
    augroup END
endfunction

function! s:goyo_leave()
  augroup goyo_enter
    autocmd!
  augroup END
  augroup! goyo_enter 
endfunction


autocmd User GoyoEnter nested call <SID>goyo_enter()
autocmd User GoyoLeave nested call <SID>goyo_leave()
"}}}
"}}}
"{{{1 Plugins
"{{{2 internal: matchit
packadd! matchit
"}}}
"{{{2 plugin: vimtex
let g:vimtex_compiler_callback_hooks = ['CleanFiles']
let g:vimtex_complete_enabled = 1
let g:vimtex_complete_bib = {"recursive": 1, "simple": 1}
function! CleanFiles(status)
    call system('latexmk -c')
endfunction
"}}}
"{{{2 plugin: airline
let g:airline_theme='gotham'
let g:airline_extensions = ['branch', 'tabline', 'ale']
"}}}
"{{{2 plugin: fzf 
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_tags_command = 'ctags -R --options=/home/fox/.config/ctags'
map <leader>f :FZF<CR>
map <leader>t :Tags<CR>
nmap <Space><Space> :Buffers<CR>
map <leader>v :BCommits<CR>
map <silent><c-l> :Snippet<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)



"}}}
"{{{2 plugin: ultisnips
" We dont really want expand trigger over tab.
" CBA to add a shitton of vimscript for tab completion
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsSnippetsDir="~/.config/vim/snippets/"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "user_snippets"]
"}}}
"{{{2 plugin: vim-go
let g:go_info_mode = 'guru'
let g:go_gopls_enabled = 0
noremap <localleader>l :GoLint<cr>
noremap <localleader>v :GoVet<cr>
noremap <localleader>b :GoBuild<cr>
noremap <localleader>i :GoInfo<cr>
noremap <localleader>r :GoRun<cr>
noremap <localleader>n :GoRename<cr>
"}}}
"{{{2 plugin: vimwiki
let g:vimwiki_hl_headers = 1
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_use_calendar=1
let g:vimwiki_listsyms = 'âââââ'
let g:vimwiki_folding = ''
"{{{3 vimwiki:main
let main_wiki = {}
let main_wiki.path = '~/Notes/main'
let main_wiki.path_html = '~/.cache/vimwiki/main/html'
let main_wiki.automatic_nested_syntaxes = 1
let main_wiki.list_margin = 0
"}}}
"{{{3 vimwiki:master
let master_wiki = {}
let master_wiki.path = '~/Notes/master'
let master_wiki.path_html = '~/.cache/vimwiki/master/html'
let master_wiki.automatic_nested_syntaxes = 1
let master_wiki.list_margin = 0
"}}}
"{{{3 vimwiki:blog
let blog_wiki = {}
let blog_wiki.path = '/home/fox/Git/prosjekter/sites/Blog/content/'
let blog_wiki.index = '_main'
let blog_wiki.automatic_nested_syntaxes = 1
let blog_wiki.list_margin = 0
let blog_wiki.template_default = 'markdown'
let blog_wiki.syntax = 'markdown'
let blog_wiki.ext = '.md'
"}}}
let g:vimwiki_list = [main_wiki, master_wiki, blog_wiki]
hi VimwikiBold term=bold cterm=bold gui=bold ctermfg=178 guifg=#dfaf00
hi VimwikiItalic term=italic cterm=italic gui=italic ctermfg=178 guifg=#dfaf00
"}}}
"{{{2 plugin: calendar.vim
let g:calendar_date_full_month_name=1
let g:calendar_frame = "unicode"
let g:calendar_first_day = 'monday'
let g:calendar_date_endian = 'big'
let g:calendar_week_number = 1
let g:calendar_google_calendar = 1
nnoremap <silent> <leader>c :Calendar -position=here<cr>
" Connect to diary
function! Open_diary() abort " {{{3
  let l:date = printf('%d-%0.2d-%0.2d',
        \ b:calendar.day().get_year(),
        \ b:calendar.day().get_month(),
        \ b:calendar.day().get_day())

  call vimwiki#diary#make_note(1, l:date)
endfunction
"}}}
augroup vimrc_calendar
  autocmd!
  autocmd FileType calendar
        \ nnoremap <silent><buffer> <cr>
        \ :<c-u>call Open_diary()<cr>
 autocmd FileType calendar nmap <buffer> q :bprev<cr>
augroup END
"}}}
"{{{2 plugin: taskwiki
let g:taskwiki_disable_concealcursor = 'yes'
"}}}
"{{{2 plugin: ale
let g:ale_set_popups=1
let g:ale_hover_to_popup=1
let g:ale_linters = {}
let g:ale_linters.python = ['pyls', 'black', 'flake8']
let g:ale_linters.rust = ['rls']
let g:ale_linters.go = ['gopls', 'goimports', 'go vet', 'golint', 'staticcheck']
let g:ale_fixers = {'python': ['black']}
let g:ale_rust_rls_toolchain = 'stable'
let g:ale_sign_column_always = 1
"}}}
"}}}

set viminfo+=n~/.cache/vim/viminfo
" vim: fdm=marker
